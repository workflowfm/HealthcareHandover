package com.workflowfm.healthcarehandover.processes

import scala.concurrent._
import com.workflowfm.pew._
import com.workflowfm.pew.execution._
import com.workflowfm.healthcarehandover.HealthcareHandoverTypes._

class DelegateHealthcareService(awardContract:AwardContract,checkOutcome:CheckOutcome,copy_OpenContract_2:Copy_OpenContract_2,decideCollaboration:DecideCollaboration,provideService:ProvideService,requestDelegation:RequestDelegation,setDelegationResponsible:SetDelegationResponsible) extends CompositeProcess { // (HealthcareActor, HealthcareService, Patient) => Future[Either[Either[(CheckedHealthcareService,ClosedContract),(OpenContract,(HealthcareActor,(Obstacle,PendingHealthcareService)))],(Delegation,(PendingHealthcareService,(ServiceRequester,RejectedContract)))]]
	override val name = "DelegateHealthcareService"
	override val output = (PiOpt(PiOpt(PiPair(Chan("DelegateHealthcareService_0_lll_a_CheckedHealthcareService"),Chan("DelegateHealthcareService_0_llr_a_ClosedContract")),PiPair(Chan("DelegateHealthcareService_0_lrl_a_OpenContract"),PiPair(Chan("DelegateHealthcareService_0_lrrl_a_HealthcareActor"),PiPair(Chan("DelegateHealthcareService_0_lrrrl_a_Obstacle"),Chan("DelegateHealthcareService_0_lrrrr_a_PendingHealthcareService"))))),PiPair(Chan("DelegateHealthcareService_0_rl_a_Delegation"),PiPair(Chan("DelegateHealthcareService_0_rrl_a_PendingHealthcareService"),PiPair(Chan("DelegateHealthcareService_0_rrrl_a_ServiceRequester"),Chan("DelegateHealthcareService_0_rrrr_a_RejectedContract"))))),"y338")
	override val inputs = Seq((Chan("DelegateHealthcareService_0__a_HealthcareActor"),"cRequestDelegation_HealthcareActor_2"),(Chan("DelegateHealthcareService_1__a_HealthcareService"),"cRequestDelegation_HealthcareService_3"),(Chan("DelegateHealthcareService_2__a_Patient"),"cRequestDelegation_Patient_1"))
	override val channels = Seq("cRequestDelegation_HealthcareActor_2","cRequestDelegation_HealthcareService_3","cRequestDelegation_Patient_1","y338")

	override val dependencies = Seq(awardContract,checkOutcome,copy_OpenContract_2,decideCollaboration,provideService,requestDelegation,setDelegationResponsible)

	override val body = PiCut("z359","z358","oRequestDelegation_lB_Delegation_x_lB_RequestedContract_x_lB_ServiceRequester_x_PendingHealthcareService_rB_rB_rB_",ParInI("z358","cSetDelegationResponsible_Delegation_1","z357",ParInI("z357","cDecideCollaboration_RequestedContract_1","z356",ParInI("z356","cSetDelegationResponsible_ServiceRequester_2","cProvideService_PendingHealthcareService_2",PiCut("z346","x338","oDecideCollaboration_lB_lB_AcceptedContract_x_ServiceProvider_rB_Plus_RejectedContract_rB_",WithIn("x338","z337","c338",LeftOut("y338","y313",ParInI("z337","cAwardContract_AcceptedContract_1","cAwardContract_ServiceProvider_2",PiCut("z331","cCopy_OpenContract_2_OpenContract_1","oAwardContract_OpenContract_",PiCut("z329","cCheckOutcome_HealthcareActor_3","oSetDelegationResponsible_HealthcareActor_",PiCut("z327","z326","oCopy_OpenContract_2_lB_OpenContract_x_OpenContract_rB_",ParInI("z326","cCheckOutcome_OpenContract_1","cProvideService_OpenContract_1",PiCut("z322","x313","oProvideService_lB_CompletedHealthcareService_Plus_lB_Obstacle_x_PendingHealthcareService_rB_rB_",WithIn("x313","cCheckOutcome_CompletedHealthcareService_2","c313",LeftOut("y313","oCheckOutcome_lB_CheckedHealthcareService_x_ClosedContract_rB_",PiCall<("CheckOutcome","cCheckOutcome_OpenContract_1","cCheckOutcome_CompletedHealthcareService_2","cCheckOutcome_HealthcareActor_3","oCheckOutcome_lB_CheckedHealthcareService_x_ClosedContract_rB_")),RightOut("y313","d313",ParOut("d313","x314","y314",PiId("cCheckOutcome_OpenContract_1","x314","m315"),ParOut("y314","x316","y316",PiId("cCheckOutcome_HealthcareActor_3","x316","m317"),ParInI("c313","x318","y318",ParOut("y316","x319","y319",PiId("x318","x319","m320"),PiId("y318","y319","m321"))))))),PiCall<("ProvideService","cProvideService_OpenContract_1","cProvideService_PendingHealthcareService_2","oProvideService_lB_CompletedHealthcareService_Plus_lB_Obstacle_x_PendingHealthcareService_rB_rB_"))),PiCall<("Copy_OpenContract_2","cCopy_OpenContract_2_OpenContract_1","oCopy_OpenContract_2_lB_OpenContract_x_OpenContract_rB_")),PiCall<("SetDelegationResponsible","cSetDelegationResponsible_Delegation_1","cSetDelegationResponsible_ServiceRequester_2","oSetDelegationResponsible_HealthcareActor_")),PiCall<("AwardContract","cAwardContract_AcceptedContract_1","cAwardContract_ServiceProvider_2","oAwardContract_OpenContract_")))),RightOut("y338","d338",ParOut("d338","x339","y339",PiId("cSetDelegationResponsible_Delegation_1","x339","m340"),ParOut("y339","x341","y341",PiId("cProvideService_PendingHealthcareService_2","x341","m342"),ParOut("y341","x343","y343",PiId("cSetDelegationResponsible_ServiceRequester_2","x343","m344"),PiId("c338","y343","m345")))))),PiCall<("DecideCollaboration","cDecideCollaboration_RequestedContract_1","oDecideCollaboration_lB_lB_AcceptedContract_x_ServiceProvider_rB_Plus_RejectedContract_rB_"))))),PiCall<("RequestDelegation","cRequestDelegation_Patient_1","cRequestDelegation_HealthcareActor_2","cRequestDelegation_HealthcareService_3","oRequestDelegation_lB_Delegation_x_lB_RequestedContract_x_lB_ServiceRequester_x_PendingHealthcareService_rB_rB_rB_"))
	
	def apply(healthcareActor:HealthcareActor,healthcareService:HealthcareService,patient:Patient)(implicit executor:ProcessExecutor[_]): Future[Either[Either[(CheckedHealthcareService,ClosedContract),(OpenContract,(HealthcareActor,(Obstacle,PendingHealthcareService)))],(Delegation,(PendingHealthcareService,(ServiceRequester,RejectedContract)))]] = {
		implicit val context:ExecutionContext = executor.executionContext
		executor.execute(this,Seq(healthcareActor,healthcareService,patient)) map(_.asInstanceOf[Either[Either[(CheckedHealthcareService,ClosedContract),(OpenContract,(HealthcareActor,(Obstacle,PendingHealthcareService)))],(Delegation,(PendingHealthcareService,(ServiceRequester,RejectedContract)))]])
	}		
}
