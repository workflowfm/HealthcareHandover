package com.workflowfm.healthcarehandover.processes

import scala.concurrent._
import com.workflowfm.pew._
import com.workflowfm.pew.execution._
import com.workflowfm.healthcarehandover.HealthcareHandoverTypes._

class AssignHealthcareService(awardContract:AwardContract,checkOutcome:CheckOutcome,copy_OpenContract_2:Copy_OpenContract_2,copy_ServiceProvider_2:Copy_ServiceProvider_2,decideCollaboration:DecideCollaboration,provideService:ProvideService,requestAssignment:RequestAssignment,setAssignmentResponsible:SetAssignmentResponsible) extends CompositeProcess { // (HealthcareActor, HealthcareService, Patient) => Future[(Either[Either[(CheckedHealthcareService,ClosedContract),(OpenContract,(HealthcareActor,(Obstacle,PendingHealthcareService)))],(Assignment,(PendingHealthcareService,RejectedContract))],ServiceRequester)]
	override val name = "AssignHealthcareService"
	override val output = (PiPair(PiOpt(PiOpt(PiPair(Chan("AssignHealthcareService_0_llll_a_CheckedHealthcareService"),Chan("AssignHealthcareService_0_lllr_a_ClosedContract")),PiPair(Chan("AssignHealthcareService_0_llrl_a_OpenContract"),PiPair(Chan("AssignHealthcareService_0_llrrl_a_HealthcareActor"),PiPair(Chan("AssignHealthcareService_0_llrrrl_a_Obstacle"),Chan("AssignHealthcareService_0_llrrrr_a_PendingHealthcareService"))))),PiPair(Chan("AssignHealthcareService_0_lrl_a_Assignment"),PiPair(Chan("AssignHealthcareService_0_lrrl_a_PendingHealthcareService"),Chan("AssignHealthcareService_0_lrrr_a_RejectedContract")))),Chan("AssignHealthcareService_0_r_a_ServiceRequester")),"z540")
	override val inputs = Seq((Chan("AssignHealthcareService_0__a_HealthcareActor"),"cRequestAssignment_HealthcareActor_2"),(Chan("AssignHealthcareService_1__a_HealthcareService"),"cRequestAssignment_HealthcareService_3"),(Chan("AssignHealthcareService_2__a_Patient"),"cRequestAssignment_Patient_1"))
	override val channels = Seq("cRequestAssignment_HealthcareActor_2","cRequestAssignment_HealthcareService_3","cRequestAssignment_Patient_1","z540")

	override val dependencies = Seq(awardContract,checkOutcome,copy_OpenContract_2,copy_ServiceProvider_2,decideCollaboration,provideService,requestAssignment,setAssignmentResponsible)

	override val body = PiCut("z546","z545","oRequestAssignment_lB_Assignment_x_lB_RequestedContract_x_lB_ServiceRequester_x_PendingHealthcareService_rB_rB_rB_",ParInI("z545","cSetAssignmentResponsible_Assignment_1","z544",ParInI("z544","cDecideCollaboration_RequestedContract_1","z543",ParInI("z543","buf540","cProvideService_PendingHealthcareService_2",ParOut("z540","y524","b540",PiCut("z530","x524","oDecideCollaboration_lB_lB_AcceptedContract_x_ServiceProvider_rB_Plus_RejectedContract_rB_",WithIn("x524","z523","c524",LeftOut("y524","y494",ParInI("z523","cAwardContract_AcceptedContract_1","cCopy_ServiceProvider_2_ServiceProvider_1",PiCut("z517","z516","oCopy_ServiceProvider_2_lB_ServiceProvider_x_ServiceProvider_rB_",ParInI("z516","cAwardContract_ServiceProvider_2","cSetAssignmentResponsible_ServiceProvider_2",PiCut("z512","cCopy_OpenContract_2_OpenContract_1","oAwardContract_OpenContract_",PiCut("z510","cCheckOutcome_HealthcareActor_3","oSetAssignmentResponsible_HealthcareActor_",PiCut("z508","z507","oCopy_OpenContract_2_lB_OpenContract_x_OpenContract_rB_",ParInI("z507","cCheckOutcome_OpenContract_1","cProvideService_OpenContract_1",PiCut("z503","x494","oProvideService_lB_CompletedHealthcareService_Plus_lB_Obstacle_x_PendingHealthcareService_rB_rB_",WithIn("x494","cCheckOutcome_CompletedHealthcareService_2","c494",LeftOut("y494","oCheckOutcome_lB_CheckedHealthcareService_x_ClosedContract_rB_",PiCall<("CheckOutcome","cCheckOutcome_OpenContract_1","cCheckOutcome_CompletedHealthcareService_2","cCheckOutcome_HealthcareActor_3","oCheckOutcome_lB_CheckedHealthcareService_x_ClosedContract_rB_")),RightOut("y494","d494",ParOut("d494","x495","y495",PiId("cCheckOutcome_OpenContract_1","x495","m496"),ParOut("y495","x497","y497",PiId("cCheckOutcome_HealthcareActor_3","x497","m498"),ParInI("c494","x499","y499",ParOut("y497","x500","y500",PiId("x499","x500","m501"),PiId("y499","y500","m502"))))))),PiCall<("ProvideService","cProvideService_OpenContract_1","cProvideService_PendingHealthcareService_2","oProvideService_lB_CompletedHealthcareService_Plus_lB_Obstacle_x_PendingHealthcareService_rB_rB_"))),PiCall<("Copy_OpenContract_2","cCopy_OpenContract_2_OpenContract_1","oCopy_OpenContract_2_lB_OpenContract_x_OpenContract_rB_")),PiCall<("SetAssignmentResponsible","cSetAssignmentResponsible_Assignment_1","cSetAssignmentResponsible_ServiceProvider_2","oSetAssignmentResponsible_HealthcareActor_")),PiCall<("AwardContract","cAwardContract_AcceptedContract_1","cAwardContract_ServiceProvider_2","oAwardContract_OpenContract_"))),PiCall<("Copy_ServiceProvider_2","cCopy_ServiceProvider_2_ServiceProvider_1","oCopy_ServiceProvider_2_lB_ServiceProvider_x_ServiceProvider_rB_")))),RightOut("y524","d524",ParOut("d524","x525","y525",PiId("cSetAssignmentResponsible_Assignment_1","x525","m526"),ParOut("y525","x527","y527",PiId("cProvideService_PendingHealthcareService_2","x527","m528"),PiId("c524","y527","m529"))))),PiCall<("DecideCollaboration","cDecideCollaboration_RequestedContract_1","oDecideCollaboration_lB_lB_AcceptedContract_x_ServiceProvider_rB_Plus_RejectedContract_rB_")),PiId("buf540","b540","m541"))))),PiCall<("RequestAssignment","cRequestAssignment_Patient_1","cRequestAssignment_HealthcareActor_2","cRequestAssignment_HealthcareService_3","oRequestAssignment_lB_Assignment_x_lB_RequestedContract_x_lB_ServiceRequester_x_PendingHealthcareService_rB_rB_rB_"))
	
	def apply(healthcareActor:HealthcareActor,healthcareService:HealthcareService,patient:Patient)(implicit executor:ProcessExecutor[_]): Future[(Either[Either[(CheckedHealthcareService,ClosedContract),(OpenContract,(HealthcareActor,(Obstacle,PendingHealthcareService)))],(Assignment,(PendingHealthcareService,RejectedContract))],ServiceRequester)] = {
		implicit val context:ExecutionContext = executor.executionContext
		executor.execute(this,Seq(healthcareActor,healthcareService,patient)) map(_.asInstanceOf[(Either[Either[(CheckedHealthcareService,ClosedContract),(OpenContract,(HealthcareActor,(Obstacle,PendingHealthcareService)))],(Assignment,(PendingHealthcareService,RejectedContract))],ServiceRequester)])
	}
  
}
